# after conv1, relu, and batchnorm: 30x30x8
        conv1 = init_layers('conv', {'filter_size': 3, 'filter_depth': 3, 'num_filters': 8})
        batchnorm1 = init_layers('batchnorm', {'in_height': 30, 'in_width': 30, 'num_channels': 8})
        # after conv2, relu, and batchnorm: 28x28x16
        conv2 = init_layers('conv', {'filter_size': 3, 'filter_depth': 8, 'num_filters': 16})
        batchnorm2 = init_layers('batchnorm', {'in_height': 28, 'in_width': 28, 'num_channels': 16})
        # after pool: 14x14x16
        # after conv3, relu, and batchnorm: 12x12x32
        pool = init_layers('pool', {'filter_size': 2, 'stride': 2})
        conv3 = init_layers('conv', {'filter_size': 3, 'filter_depth': 16, 'num_filters': 32})
        batchnorm3 = init_layers('batchnorm', {'in_height': 12, 'in_width': 12, 'num_channels': 32})
        relu = init_layers('relu', {})
        # after flatten: 1152x1
        flatten = init_layers('flatten', {})
        linear1 = init_layers('linear', {'num_in': 1152, 'num_out': 512})
        linear2 = init_layers('linear', {'num_in': 512, 'num_out': 10})
        softmax = init_layers('softmax', {})
        
        layers = [conv1, relu, batchnorm1,
                  conv2, relu, batchnorm2,
                  pool,
                  conv3, relu, batchnorm3,
                  pool, flatten,
                  linear1, relu,
                  linear2, softmax]

        metrics = None

        model = init_model(layers, [X_train.shape[0], X_train.shape[1], X_train.shape[2]], 10, True)
    
    numIters = 201
    params = {"learning_rate": 1e-3, 
              "weight_decay": 1e-4,
              "batch_size": 128,
              "test_batch_size": 128,
              "test_report_freq": 5,
              "train_report_freq": 1,
              "training_batch_update_freq": 1,
              "save_model_freq": 20,
              "friction_rho": 0.9,
              "eps": 1e-5,
              "metrics": metrics}